import org.apache.tools.ant.filters.ReplaceTokens

// This is a little fragile, need to find a way to ask Gradle for this info.
def gradleArtifactCache = new File(gradle.gradleUserHomeDir, "cache")

// The configurations of which we collect all the dependencies of for our lib dir.
// Notice that we exclude all project dependencies as we do NOT want jars built by this project
// to be part of the configuration. This also avoids building those jars when running this task.
def libsConfigurations = []
subprojects {
    configurations {
        libsConfigurations << libs { 
            extendsFrom compile, runtime
            ["jsp21", "agent"].collect { configurations.findByName(it) }.findAll { it != null }.each { extendsFrom it }
        }.copyRecursive {
            !(it instanceof org.gradle.api.artifacts.ProjectDependency)
        }
    }
}

task populateDependencies(type: Sync, dependsOn: libsConfigurations) {
    into homeLibDir
    
    // Only configure this task if we are indeed going to run it because it forces a resolution of all of the subproject
    // dependencies which is very costly and we want to avoid it if we aren't going to run this task. Because we do this
    // after the task graph is ready we have to add the explicit dependency on the configurations as per above.
    gradle.taskGraph.whenReady { taskGraph ->
       if (taskGraph.hasTask(':populateDependencies')) {
           from(gradleArtifactCache) {
               libsConfigurations*.resolvedConfiguration*.resolvedArtifacts*.each { artifact ->
                   def dependency = artifact.getResolvedDependency()

                   def file = artifact.file
                   include "${dependency.moduleGroup}/${dependency.moduleName}/*-${dependency.moduleVersion}.*"
                   include "${dependency.moduleGroup}/${dependency.moduleName}/jars/${dependency.moduleName}-${dependency.moduleVersion}.jar"
                   include "${dependency.moduleGroup}/${dependency.moduleName}/bundles/${dependency.moduleName}-${dependency.moduleVersion}.jar"
               }
           }
       }
    }
}

// Can't use sync task here because this directory contains other things as well.
task sourcesJars(type: Copy) {
    into homeSrcDir
    from subprojects*.sourcesJar*.outputs*.files
}

task pluginsFromSvn {
    dir = "$buildDir/pluginsFromSvn"
    grailsHibernateDest = "$dir/grails-hibernate-${grailsVersion}.zip"
    grailsTomcatDest = "$dir/grails-tomcat-${grailsVersion}.zip"
    outputs.files grailsHibernateDest, grailsTomcatDest
    doFirst {
        ant {
            mkdir(dir: dir)
            def versionTag = grailsVersion.replaceAll(/\./, '_').toUpperCase()
            get(src: "http://svn.codehaus.org/grails-plugins/grails-hibernate/tags/RELEASE_${versionTag}/grails-hibernate-${grailsVersion}.zip",
                dest: grailsHibernateDest, verbose: true, usetimestamp: true)
            get(src: "http://svn.codehaus.org/grails-plugins/grails-tomcat/tags/RELEASE_${versionTag}/grails-tomcat-${grailsVersion}.zip",
                dest: grailsTomcatDest, verbose: true, usetimestamp: true)
        }
    }
}

task installResources(type: Copy) {
    into projectDir // not actually used, but has to be set to something
    
    into(homeLibDir.name) {
        from('grails-resources/src/grails/home/tests')
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
    }

    into(homeBinDir.name) {
        from("grails-resources/src/grails/home/bash")
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
        filter(ReplaceTokens, tokens: ['groovy.version': groovyVersion])
        filter(ReplaceTokens, tokens: ['spring.loaded.version': springLoadedVersion])
        fileMode = 0755
    }

    // the fileMode property above should take care of the chmod work, but
    // it doesn't per http://jira.codehaus.org/browse/GRADLE-971
    doLast {
        ant.chmod(dir: homeBinDir, perm: '755', includes: '*')
    }

    into(homeConfDir.name) {
        from("grails-resources/src/grails/home/conf")
        
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
        filter(ReplaceTokens, tokens: ['groovy.version': groovyVersion])
        filter(ReplaceTokens, tokens: ['jline.version': jlineVersion])
        filter(ReplaceTokens, tokens: ['jansi.version': jansiVersion])
        filter(ReplaceTokens, tokens: ['jna.version': jnaVersion])
        filter(ReplaceTokens, tokens: ['commons.cli.version': commonsCliVersion])
        filter(ReplaceTokens, tokens: ['ant.version': antVersion])
        filter(ReplaceTokens, tokens: ['gant.version': gantVersion])
        filter(ReplaceTokens, tokens: ['ivy.version': ivyVersion])
    }
    
    into(homeDslSupportDir.name) {
        from 'grails-resources/src/grails/home/dsl-support'
    }
    
    into ("$homeSrcDir.name/war/WEB-INF") {
        from "grails-resources/src/war/WEB-INF"
    }
}

// Make the install task for each subproject place the output jar into the dist dir
subprojects {
    install.doLast {
         copy {
             from jar.outputs.files
             into homeDistDir
         }
    }
}

task install(dependsOn: [populateDependencies, installResources] + subprojects*.install)

task zipDist(type: Zip, dependsOn: [sourcesJars, install]) {
    destinationDir = "${buildDir}/distributions" as File
    baseName = 'grails'
    appendix = grailsVersion
    
    from(projectDir) {
        into "grails-$grailsVersion"
        include 'lib/', 'gradle/', 'media/', 'samples/', 'scripts/', 'build.gradle', 'build.properties', 'dependencies.txt',
                'LICENSE', 'INSTALL', "src/", "gradlew.bat","gradle.properties"
        exclude 'ant/bin', 'src/grails', 'src/war'
    }
    from("grails-resources") {
        into "grails-$grailsVersion"
        include 'src/grails/**', 'src/war/**'
        // this file is accounted for later with special handling to do some token replacement
        exclude 'src/grails/grails-macros.xml'
    }
    from(projectDir) {
        into "grails-$grailsVersion"
        include "gradlew"
        fileMode = 0755
    }
    from(docs.destinationDir) {
        into "grails-$grailsVersion/doc"
    }
    exclude "**/CVS/**"
    from(pluginsFromSvn.outputs.files) {
        into "grails-$grailsVersion/plugins"
    }
    from('grails-resources/src/grails/home/docs/README') {
        into "grails-$grailsVersion"
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
    }
    from('grails-resources/src/grails/home/tests') {
        into "grails-$grailsVersion/src/resources/tests"
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
    }
    from("grails-resources/src/grails/home/bash") {
        into "grails-$grailsVersion/bin"
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
        filter(ReplaceTokens, tokens: ['groovy.version': groovyVersion])
        filter(ReplaceTokens, tokens: ['spring.loaded.version': springLoadedVersion])
        fileMode = 0755
    }
    from("grails-resources/src/grails/home/conf") {
        into "grails-$grailsVersion/conf"
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
        filter(ReplaceTokens, tokens: ['groovy.version': groovyVersion])
        filter(ReplaceTokens, tokens: ['jline.version': jlineVersion])
        filter(ReplaceTokens, tokens: ['jansi.version': jansiVersion])
        filter(ReplaceTokens, tokens: ['jna.version': jnaVersion])
        filter(ReplaceTokens, tokens: ['commons.cli.version': commonsCliVersion])
        filter(ReplaceTokens, tokens: ['ant.version': antVersion])
        filter(ReplaceTokens, tokens: ['gant.version': gantVersion])
        filter(ReplaceTokens, tokens: ['ivy.version': ivyVersion])
        filter(ReplaceTokens, tokens: ['jline.version': jlineVersion])
        filter(ReplaceTokens, tokens: ['jansi.version': jansiVersion])
        filter(ReplaceTokens, tokens: ['jna.version': jnaVersion])
        filter(ReplaceTokens, tokens: ['commons.cli.version': commonsCliVersion])
    }
    from(homeDistDir) {
        into "grails-$grailsVersion/dist"
        exclude "*.zip"
    }
    from("grails-resources/src/grails/grails-macros.xml") {
        into "grails-$grailsVersion/src/grails"
        filter(ReplaceTokens, tokens: ['grails.version': grailsVersion])
    }
    from('grails-resources/src/grails/home/dsl-support') {
        into "grails-$grailsVersion/dsl-support"
    }
}

/*task zipDoc(type: Zip) {
    appendix = 'docs'
    from docs.destinationDir
}*/


task assemble(dependsOn: zipDist)
