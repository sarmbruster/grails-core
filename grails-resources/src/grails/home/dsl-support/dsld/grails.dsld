/*
 * Copyright 2011 SpringSource
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

import org.codehaus.groovy.ast.ClassHelper;
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.GenericsType;
import org.codehaus.groovy.ast.PropertyNode;
import org.codehaus.groovy.ast.expr.ClassExpression;
import org.codehaus.groovy.ast.expr.MapEntryExpression;
import org.codehaus.groovy.ast.expr.MapExpression;

/**
 * DSL support for the Grails Framework when editing inside of STS.  Requires STS 2.7.0 or later.
 * @author Andrew Eisenberg
 * @since 2.0
 */

/*
 * A note about using named parameters:
 *
 * DSLD supports various kinds of parameters: regular, named and optional.
 * regular and named parameters appear in content assist, and optional does not.
 * named and optional parameters are inserted with the argument name prefixed.
 *
 * Here is an example:
 * method name:"meth",
 *        params: [first:String, second: "foo.MyObj",
 *        namedParams:[third:Integer, fourth:Long],
 *        optionalParams:[fifth:"foo.Optional", sixth:"foo.OtherOptional"]
 *
 * note that the use of named and optional parameters deprecates the "useNamed" argument.
 */

// -----------------------------------------------------
// Set-up

def grailsArtifact = { String folder ->
	sourceFolderOfCurrentType("grails-app/" + folder) &
	nature("grails") & (~isScript())
}

// define the various kinds of grails artifacts
def domainClass = grailsArtifact("domain")
// so far we only require domainClass, but we can also reference other kinds of artifacts here
//def controllerClass = grailsArtifact("controllers")
//def serviceClass = grailsArtifact("services")
//def taglibClass = grailsArtifact("taglib")
def unitTest = sourceFolderOfCurrentType("test/unit")


/**
 * Extract the first generic type from the ClassNode, if it exists
 * @param orig
 * @return
 */
ClassNode extractGeneric(ClassNode orig) {
     GenericsType[] gt = orig.genericsTypes
     if (gt?.length == 1) {
              return gt[0].type
     }
     null
}

// converts a type name to a property name by converting first char to lower case
def toPropertyName(String typeName) {
    // Check whether the name begins with two upper case letters.
    if (typeName.length() > 1
                   && Character.isUpperCase(typeName.charAt(0))
                   && Character.isUpperCase(typeName.charAt(1)))  {
          return typeName
	}
    return typeName[0].toLowerCase(Locale.ENGLISH) + typeName.substring(1);
}
 
 void addSyntheticFieldToWormhole(String name, ClassNode type, Map wormhole) {
	 def synth = wormhole["syntheticFields"] 
	 if (!synth) {
		 synth = [:]
		 wormhole["syntheticFields"] = synth
	 }
	 log "Adding $name $type"
	 synth[name] = type
 }

// -----------------------------------------------------
// constraints
// The constraints DSL is only applicable inside of the static "constraints" field declaration
(domainClass &
	inClosure() &
	enclosingField(name("constraints") & isStatic()) &
	isThisType() &
	bind(props : properties(~isStatic())) // 'bind' props to the collection of properties in the domain class
	).accept {

	provider = "Grails Constraints DSL"  // this value will appear in content assist

	// FIXJB : ensure that all constraints are correct below
	// FIXJB : add documentation
	// for each non-static property, there are numerous constraints "methods" that are available
	// define them all here
	for (PropertyNode prop in props) {
		if (prop.type == ClassHelper.STRING_TYPE) {
			method isStatic: true, name: prop.name, params: [blank:Boolean], useNamedArgs:true, doc: 'Validate that a String is is not blank. <a href="http://grails.org/doc/latest/ref/Constraints/blank.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [creditCard:Boolean], useNamedArgs:true, doc: 'Validate that a String is a valid credit card number. <a href="http://grails.org/doc/latest/ref/Constraints/creditCard.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [email:Boolean], useNamedArgs:true, doc: 'Validate that a String is a valid email address. <a href="http://grails.org/doc/latest/ref/Constraints/email.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [url:Boolean], useNamedArgs:true, doc: 'Validate that a String is a valid URL. <a href="http://grails.org/doc/latest/ref/Constraints/url.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [matches:String], useNamedArgs:true, doc: 'Validate that a String matches a regular expression. <a href="http://grails.org/doc/latest/ref/Constraints/matches.html">Details.</a>'
		} else if (prop.type.name == Date.name) {
			method isStatic: true, name: prop.name, params: [max:Date], useNamedArgs:true, doc: 'Validate that a Date is not after the specified date. <a href="http://grails.org/doc/latest/ref/Constraints/max.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [min:Date], useNamedArgs:true, doc: 'Validate that a Date is not before the specified date. <a href="http://grails.org/doc/latest/ref/Constraints/min.html">Details.</a>'
		} else if (ClassHelper.isNumberType(prop.type)) {
			method isStatic: true, name: prop.name, params: [max:prop.type], useNamedArgs:true, doc: 'Validate that a number is not greater than the specified value. <a href="http://grails.org/doc/latest/ref/Constraints/max.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [min:prop.type], useNamedArgs:true, doc: 'Validate that a number is not less than the specified value. <a href="http://grails.org/doc/latest/ref/Constraints/min.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [scale:prop.type], useNamedArgs:true, doc: 'Sets to the desired scale for floating point numbers. <a href="http://grails.org/doc/latest/ref/Constraints/scale.html">Details.</a>'
		} else if (prop.type.implementsInterface(ClassHelper.LIST_TYPE)) {
			method isStatic: true, name: prop.name, params: [maxSize:Number], useNamedArgs:true, doc: 'Validate that the collection does not have more than the specified number of elements.  <a href="http://grails.org/doc/latest/ref/Constraints/maxSize.html">Details.</a>'
			method isStatic: true, name: prop.name, params: [minSize:Number], useNamedArgs:true, doc: 'Validate that the collection does not have fewer than the specified number of elements.  <a href="http://grails.org/doc/latest/ref/Constraints/maxSize.html">Details.</a>'
		}
		method isStatic: true, name: prop.name, params: [unique:Boolean], useNamedArgs:true, doc: 'Validate that the value is unique at the database level.  <a href="http://grails.org/doc/latest/ref/Constraints/unique.html">Details.</a>'
		method isStatic: true, name: prop.name, params: [size:Integer], useNamedArgs:true, doc: 'Validate that the size of a value falls within the specified range.  <a href="http://grails.org/doc/latest/ref/Constraints/size.html">Details.</a>'
		method isStatic: true, name: prop.name, params: [notEqual:Object], useNamedArgs:true, doc: 'Validate that the value is not equal to the specified value.  <a href="http://grails.org/doc/latest/ref/Constraints/notEqual.html">Details.</a>'
		method isStatic: true, name: prop.name, params: [nullable:Boolean], useNamedArgs:true, doc: 'Specify if a value is allowed to be null.  <a href="http://grails.org/doc/latest/ref/Constraints/nullable.html">Details.</a>'
		method isStatic: true, name: prop.name, params: [range:Range], useNamedArgs:true, doc: 'Validate that the value falls within the specified range.  <a href="http://grails.org/doc/latest/ref/Constraints/range.html">Details.</a>'
		method isStatic: true, name: prop.name, params: [inList:List], useNamedArgs:true, doc: 'Validate that the value is with a list of specified values.  <a href="http://grails.org/doc/latest/ref/Constraints/inList.html">Details.</a>'
	}

	// FIXJB : add the id property (type long)
}

// -----------------------------------------------------     
// GormStaticAPI
// GormInstanceAPI
// GormValidationAPI
//
// with a little bit of Criteria builder mixed in
domainClass.accept {
	provider = "GORM Instance API"
	delegatesTo type:"org.grails.datastore.gorm.GormInstanceApi<${currentType.name}>", asCategory:true
	provider = "GORM Validation API"
	delegatesTo type:"org.grails.datastore.gorm.GormValidationApi<${currentType.name}>", asCategory:true
	provider = "GORM Static API"
	delegatesTo type:"org.grails.datastore.gorm.GormStaticApi<${currentType.name}>", isStatic:true, except:["withCriteria", "createCriteria", "where", "find", "findAll"]

	method name:"find", type:currentType, params: [query : Closure],
		declaringType:currentType, isStatic:true

	method name:"findAll", type:"java.util.List<${currentType.name}>", params: [query : Closure],
		declaringType:currentType, isStatic:true

	provider = "Criteria builder DSL"
	method name:"createCriteria", type:"grails.orm.HibernateCriteriaBuilder",
		declaringType:"grails.orm.HibernateCriteriaBuilder", isStatic:true
	method name:"withCriteria", type:"java.util.List<${currentType.name}>", params: [query : Closure],
		declaringType:"grails.orm.HibernateCriteriaBuilder", isStatic:true

	provider = "Where query DSL"
	method name:"where", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params: [query : Closure],
		declaringType:currentType, isStatic:true
}

// -----------------------------------------------------
// hasMany, hasOne, belongsTo

// hasMany
(domainClass & currentType(props : properties(isStatic() & name("hasMany")))).accept {
	provider = "Grails hasMany"
	props.each { PropertyNode hasMany ->
		if (hasMany.initialExpression instanceof MapExpression) {
			hasMany.initialExpression.mapEntryExpressions.each { MapEntryExpression entry ->
				if (!currentType.getProperty(entry.keyExpression.text)) {
					def name = entry.keyExpression.text
					def type = entry.valueExpression.type
					property name : name, type : "java.util.Set<" + type.name +">"
					addSyntheticFieldToWormhole(name, type, wormhole)
				}
			}
		}
	}
}

// hasOne
(domainClass & currentType(props : properties(isStatic() & name("hasOne")))).accept {
	provider = "Grails hasOne"
	props.each { PropertyNode hasOne ->
		if (hasOne.initialExpression instanceof MapExpression) {
			hasOne.initialExpression.mapEntryExpressions.each { MapEntryExpression entry ->
				def name = entry.keyExpression.text
				def type = entry.valueExpression.type
				property name : name, type : type
				addSyntheticFieldToWormhole(name, type, wormhole)
			}
		}
	}
}
// belongsTo
(domainClass & currentType(props : properties(isStatic() & name("belongsTo")))).accept {
	provider = "Grails belongsTo"
	props.each { PropertyNode belongsTo ->
			if (belongsTo.initialExpression instanceof MapExpression) {
				belongsTo.initialExpression.mapEntryExpressions.each { MapEntryExpression entry ->
					def name = entry.keyExpression.text
					def type = entry.valueExpression.type
					property name : name, type : type
					addSyntheticFieldToWormhole(name, type, wormhole)
				}
			} else if (belongsTo.initialExpression instanceof ClassExpression) {
				def name = toPropertyName(belongsTo.type.nameWithoutPackage)
				def type = belongsTo.type
				property name : name, type : type
				addSyntheticFieldToWormhole(name, type, wormhole)
			}
		}
}


// -----------------------------------------------------
// where queries
// see: http://hudson.grails.org/job/grails_docs_2.0.x/lastSuccessfulBuild/artifact/build/docs/guide/GORM.html#whereQueries
def whereQuery = (domainClass & inClosure() & (enclosingCallName("where") | enclosingCallName("find") | enclosingCallName("findAll")))

whereQuery.accept {
	provider = "Where query DSL"
	// add the extra functions
	method name:"avg", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"The average of all values"
	method name:"sum", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"The sum of all values"
	method name:"max", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"The maximum value"
	method name:"min", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"The minimum value"
	method name:"count", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"The count of all values"
	method name:"property", type:"grails.gorm.DetachedCriteria<${currentType.name}>", params:[prop:Object], doc:"Retrieves a property of the resulting entities"

	// extraction functions
	method name:"second", type:Integer, params:[prop:Date], doc:"The second of a date property"
	method name:"minute", type:Integer, params:[prop:Date], doc:"The minute of a date property"
	method name:"hour", type:Integer, params:[prop:Date], doc:"The hour of a date property"
	method name:"day", type:Integer, params:[prop:Date], doc:"The day of a date property"
	method name:"year", type:Integer, params:[prop:Date], doc:"The year of a date property"

	method name:"lower", type:String, params:[prop:String], doc:"Converts a string property to lower case"
	method name:"upper", type:String, params:[prop:String], doc:"Converts a string property to upper case"
	method name:"length", type:Integer, params:[prop:String], doc:"The length of a string property"
	method name:"trim", type:String, params:[prop:String], doc:"Trims a string property"
}

// here are nested queries
(whereQuery & enclosingCallName(names : name())).accept {
	// grab each enclosing name and see if it is a property of the current domain class
	// it may be a synthetic proeprty
	names.each {
		def prop = currentType.getProperty(it)
		def maybe
		if (prop) {
			maybe = prop.type
		} else {
			// grab synthetic properties (hadOne, belongsTo, and hasMany) from the wormhole 
			Map<String,ClassNode> synth = wormhole["syntheticFields"]
			if (synth) {
				maybe = synth[it]
			}
		}
		// perform the delegation to properties
		if (maybe && currentType != maybe) {
			maybe.properties.each { PropertyNode innerProp ->
				property(name:innerProp.name, type:innerProp.type, declaringType: maybe, provider: "Inner query", )
			}
		}
	} 
}  

// the 'of' method
currentType("grails.gorm.DetachedCriteria").accept { 
	provider = "Where query DSL"
	method name:"of", params:[subquery:Closure], declaringType:extractGeneric(currentType), doc:"You can apply additional criteria to any subquery by using the of method and passing in a closure containing the criteria."
}


// Criteria builder --- 
currentType("grails.orm.HibernateCriteriaBuilder").accept {
	provider = "Criteria builder DSL"
	method name : "and", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "or", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "not", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "projections", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	delegatesTo "org.hibernate.Criteria"
}

// namedQueries field
// not exactly right since HibernateCriteriaBuilder methods should only be available 
// inside of nested closures in the namedQueries field, but this formulation will
// allow methods directly inside of the top-level namedQueries closure.
contribute(enclosingField("namedQueries") & domainClass) {
	provider = "Criteria builder DSL"
	method name : "and", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "or", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "not", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	method name : "projections", type : "grails.orm.HibernateCriteriaBuilder", params : [components : Closure]
	delegatesTo "grails.orm.HibernateCriteriaBuilder"
	delegatesTo "org.hibernate.Criteria"
}


// -----------------------------------------------------
// mapping --- orm DSL
// FIXJB : Ensure nothing is missed
// FIXJB : Add documentation
(domainClass & currentType(properties(isStatic() & name("mapping")) &
	bind(props : properties(~isStatic())) // 'bind' props to the collection of properties in the domain class
	)).accept {
	provider = "Grails ORM DSL"

	method name:"table", type:Void, params: [tableName: String], useNamedArgs:true, isStatic:true
	method name:"groups", type:Void, params: [column:String], useNamedArgs:true, isStatic:true
	method name:"tablePerHierarchy", type:Void, params: [val:Boolean], isStatic:true
	method name:"cache", type:Void, params: [shouldCache:Boolean], isStatic:true
	method name:"cache", type:Void, params: [usage:String, include:String], useNamedArgs:true, isStatic:true
	method name:"version", type:Void, params: [shouldVersion:Boolean], isStatic:true
	method name:"sort", type:Void, params: [propertyName:String], isStatic:true
	method name:"column", type:Void, params: [name:String, index:String, unique:Boolean, sqlType:String], isStatic:true

	props.each { PropertyNode prop ->
		method name: prop.name, type: Void, params:[column:String, cache:Boolean], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[lazy:Boolean], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[type:Class], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[type:String], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[cascade:String], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[formula:String], useNamedArgs:true, isStatic:true
		method name: prop.name, type: Void, params:[joinTable:"java.util.Map<java.lang.String,java.lang.String>"],
				useNamedArgs:true, isStatic:true
	}

	// now do the same for id
	method name: 'id', type: Void, params:[column:String, cache:Boolean], useNamedArgs:true, isStatic:true
	method name: 'id', type: Void, params:[lazy:Boolean], useNamedArgs:true, isStatic:true
	method name: 'id', type: Void, params:[type:Class], useNamedArgs:true, isStatic:true
	method name: 'id', type: Void, params:[type:String], useNamedArgs:true, isStatic:true
	method name: 'id', type: Void, params:[cascade:String], useNamedArgs:true, isStatic:true
	method name: 'id', type: Void, params:[joinTable:"java.util.Map<java.lang.String,java.lang.String>"], useNamedArgs:true, isStatic:true
	method name: 'id', type :Void, params:[composite:"java.util.List<java.lang.String>"], useNamedArgs:true, isStatic:true
}



(unitTest &
		enclosingClass(annotatedBy(name("grails.test.mixin.TestFor") &
		hasAttribute(types : value())))).accept {
	types.each { String className ->
		 if (className.contains("Controller")) {
			 provider = "Controller unit test DSL"
			 // assume controller test
			 property name: "controller", type: className, doc: "The controller class under test"
			 property name: "request", type: "javax.servlet.http.HttpServletRequest", doc: "The HTTP request object"
			 property name: "response", type: "org.codehaus.groovy.grails.plugins.testing.GrailsMockHttpServletResponse", doc: "The HTTP response object"
			 property name: "flash", type: "java.util.Map<java.lang.String,java.lang.String>"
			 property name: "params", type: "java.util.Map<java.lang.String,java.lang.String>"
			 property name: "view", type: "org.springframework.web.servlet.View"
			 property name: "model", type: Map
			 property name: "modelAndView", type: "org.springframework.web.servlet.ModelAndView"

			 // FIXADE probably should be broken up into several contributions
			 method name: "render", useNamedArgs: true,
			 	params: [template: String, view:String, model:"java.util.Map<java.lang.String,java.lang.Object>", action: String]

		 	 method name:"defineBeans", params:[beans:Closure]
		 }

		 if (className.contains("TagLib")) {
			 // assume tag lib
			 method name: "applyTemplate", type:String, params:[tag:String]
		 }
	}
}